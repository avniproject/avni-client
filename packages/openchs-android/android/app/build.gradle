apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'

googleServices {
    disableVersionCheck = true
}

import com.android.build.OutputFile

project.ext.react = [
        extraPackagerArgs: ["--sourcemap-output", "$buildDir/generated/sourcemap.js"]
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = System.getenv("enableSeparateBuildPerCPUArchitecture") ? System.getenv("enableSeparateBuildPerCPUArchitecture").toBoolean() : true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    dexOptions {
        javaMaxHeapSize "3g"
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.openchsclient"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv("versionCode") ? System.getenv("versionCode").toInteger() : 1
        //Our convention of versionCode from now in is to form the number from digits in versionName. E.g. for versionName 2.6.1, the versionCode should be 261. This is to avoid conflicts of versionCodes between different branches.
        // Major.Minor.Patch. We should not change major version every release, just change the minor. Each number allows for two digits
        // https://medium.com/@maxirosson/versioning-android-apps-d6ec171cfd82
        versionName System.getenv("versionName") ? System.getenv("versionName") : "1"

        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            if (enableSeparateBuildPerCPUArchitecture) {
                abiFilters.clear()
            }
        }
        manifestPlaceholders = [
                bugsnagAPIKey: System.getenv("OPENCHS_CLIENT_BUGSNAG_API_KEY") ?: "dummy"
        ]
        multiDexEnabled true
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            universalApk false
            // If true, also generate a universal APK. This does not affect generation of separate apk per cpu architecture. This is an add on apk that is generated for upload to other markets, such as APKFiles, which do not support multiple APKs for a single app.

        }
    }

    signingConfigs {

        release {

            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}openchs-release-key.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}openchs-release-key"
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        println('[Avni] Base version code:' + defaultConfig.versionCode)
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
                println('[Avni] APK version code:' + output.versionCodeOverride + ' for variant: ' + versionCodes.get(abi))
            } else {
                println('[Avni] Using universal release variant')
            }
        }
    }
}

dependencies {
    implementation project(':react-native-background-timer')
    implementation project(':react-native-file-viewer')
    implementation project(':react-native-keep-awake')
    implementation project(':react-native-audio-recorder-player')
    implementation project(':react-native-document-picker')
    implementation project(':react-native-zip-archive')
    implementation project(':react-native-background-job')
    implementation project(':react-native-webview')
    implementation project(':@react-native-firebase_app')
    implementation project(':@react-native-firebase_analytics')
    implementation project(':react-native-immediate-phone-call')
    implementation project(':react-native-code-push')
    implementation project(':amazon-cognito-identity-js')
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-fs')
    implementation(project(':react-native-video')) {
        exclude group: 'com.squareup.okhttp3'
    }
    implementation project(':bugsnag-react-native')
    implementation project(':react-native-geolocation-service')
    implementation project(':react-native-charts-wrapper')
    implementation project(':react-native-vector-icons')
//    implementation project(':react-native-i18n')
//    implementation project(':realm')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.appcompat:appcompat:${rootProject.ext.supportLibVersion}"
    implementation project(':react-native-device-info')
    implementation "com.facebook.react:react-native:+"
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha03'

    implementation jscFlavor
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}
