plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.facebook.react")
    id("com.google.gms.google-services")
    id("kotlin-kapt")
}

googleServices {
    disableVersionCheck = true
}
/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    debuggableVariants = ["genericDebug", "lfeDebug", "sakhiDebug"]
    autolinkLibrariesWithApp()
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = System.getenv("enableSeparateBuildPerCPUArchitecture") ? System.getenv("enableSeparateBuildPerCPUArchitecture").toBoolean() : true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true


android {
    ndkVersion rootProject.ext.ndkVersion
    namespace "com.openchsclient"

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv("versionCode") ? 8 * 1048576 + System.getenv("versionCode").toInteger() : 1
        //Our convention of versionCode from now in is to form the number from digits in versionName. E.g. for versionName 2.6.1, the versionCode should be 261. This is to avoid conflicts of versionCodes between different branches.
        // Major.Minor.Patch. We should not change major version every release, just change the minor. Each number allows for two digits
        // https://medium.com/@maxirosson/versioning-android-apps-d6ec171cfd82
        versionName System.getenv("versionName") ? System.getenv("versionName") : "1"

        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            if (enableSeparateBuildPerCPUArchitecture) {
                abiFilters.clear()
            }
        }
        multiDexEnabled true

        buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false")
        buildConfigField("boolean", "IS_HERMES_ENABLED", "true")
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            universalApk false
            // If true, also generate a universal APK. This does not affect generation of separate apk per cpu architecture. This is an add on apk that is generated for upload to other markets, such as APKFiles, which do not support multiple APKs for a single app.

        }
    }

    signingConfigs {
        generic {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}generic-release-key.keystore")
            storePassword System.getenv("generic_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("generic_KEY_ALIAS")}"
            keyPassword System.getenv("generic_KEY_PASSWORD")
            enableV1Signing false
        }
        lfe {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}lfe-release-key.keystore")
            storePassword System.getenv("lfe_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("lfe_KEY_ALIAS")}"
            keyPassword System.getenv("lfe_KEY_PASSWORD")
            enableV1Signing false
        }
        lfeTeachNagaland {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}lfeTeachNagaland-release-key.keystore")
            storePassword System.getenv("lfeTeachNagaland_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("lfeTeachNagaland_KEY_ALIAS")}"
            keyPassword System.getenv("lfeTeachNagaland_KEY_PASSWORD")
            enableV1Signing false
        }
        lfeTeachNagalandSecurity {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}lfeTeachNagaland-release-key.keystore")
            storePassword System.getenv("lfeTeachNagaland_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("lfeTeachNagaland_KEY_ALIAS")}"
            keyPassword System.getenv("lfeTeachNagaland_KEY_PASSWORD")
            enableV1Signing false
        }
        sakhi {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}sakhi-release-key.keystore")
            storePassword System.getenv("sakhi_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("sakhi_KEY_ALIAS")}"
            keyPassword System.getenv("sakhi_KEY_PASSWORD")
            enableV1Signing false
        }
        gramin {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}gramin-release-key.keystore")
            storePassword System.getenv("gramin_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("gramin_KEY_ALIAS")}"
            keyPassword System.getenv("gramin_KEY_PASSWORD")
            enableV1Signing false
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    project.logger.lifecycle("bugsnagAPIKey=" + System.getenv("OPENCHS_CLIENT_BUGSNAG_API_KEY"))
    flavorDimensions "organisation"
    productFlavors {
        generic {
            applicationId "com.openchsclient"
            resValue "string", "app_name", "Avni"
            signingConfig signingConfigs.generic
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("OPENCHS_CLIENT_BUGSNAG_API_KEY") ?: "dummy"]
        }
        lfe {
            applicationId "org.lfeteach.openchsclient"
            resValue "string", "app_name", "Teach AP"
            resValue "string", "sha256_app_google_signature", "76b9cbbc73fdbdb5aaeb26b4bfd260a81e338acd63831bcc3b3948d5b22eb0f3"
            resValue "string", "sha256_app_upload_key_signature", "1316b6323d287df02f3a623ee675cbdac123e351e8163e78a3315da3206f6092"
            signingConfig signingConfigs.lfe
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("LFE_CLIENT_BUGSNAG_API_KEY") ?: "dummy"]
        }
        lfeTeachNagaland {
            applicationId "com.openchsclient.lfeteach.nagaland"
            resValue "string", "app_name", "TEACH Nagaland"
            resValue "string", "sha256_app_google_signature", "80e6b34b2026ce180ca8d6f09a885031082d0acf64eb6bd0492f36121d064ebf"
            resValue "string", "sha256_app_upload_key_signature", "ac19586277b021dcba5097f7e47d7473bab41bf0369fb771a2bff581734561fc"
            signingConfig signingConfigs.lfeTeachNagaland
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("LFE_TEACH_NAGALAND_BUGSNAG_API_KEY") ?: "dummy"]
        }
        lfeTeachNagalandSecurity {
            applicationId "com.openchsclient.lfeteach.nagaland"
            resValue "string", "app_name", "TEACH Nagaland"
            resValue "string", "sha256_app_google_signature", "80e6b34b2026ce180ca8d6f09a885031082d0acf64eb6bd0492f36121d064ebf"
            resValue "string", "sha256_app_upload_key_signature", "ac19586277b021dcba5097f7e47d7473bab41bf0369fb771a2bff581734561fc"
            signingConfig signingConfigs.lfeTeachNagaland
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("LFE_TEACH_NAGALAND_BUGSNAG_API_KEY") ?: "dummy"]
        }
        sakhi {
            applicationId "org.sakhi.openchsclient"
            resValue "string", "app_name", "Sakhi 2.0"
            signingConfig signingConfigs.sakhi
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("OPENCHS_CLIENT_BUGSNAG_API_KEY") ?: "dummy"]
        }
        gramin {
            applicationId "com.openchsclient.gramin"
            resValue "string", "app_name", "Avni Gramin"
            signingConfig signingConfigs.sakhi
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("GRAMIN_BUGSNAG_API_KEY") ?: "dummy"]
        }
    }
    namespace 'com.openchsclient'
    sourceSets {
        // Required to enable TamperChecking, init this only for flavours which need Security Tamper Check enabled
        lfe.java.srcDir 'src/common/java'
        lfeTeachNagaland.java.srcDir 'src/common/java'
        lfeTeachNagalandSecurity.java.srcDir 'src/common/java'
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:hermes-android")

    // Autolinking handles all React Native packages automatically
    // Keep Avni-specific native dependencies if any

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'
    implementation 'androidx.work:work-runtime:2.8.1'
    implementation 'org.jetbrains:annotations:16.0.2'

    // Flipper dependencies for debugging (debug builds only)
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FRESCO_PLUGIN_VERSION}")
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}
