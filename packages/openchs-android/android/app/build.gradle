apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

googleServices {
    disableVersionCheck = true
}
/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
     debuggableVariants = ["genericDebug", "lfeDebug", "sakhiDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
//     extraPackagerArgs = ["--sourcemap-output", "$buildDir/generated/sourcemap.js"]

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = System.getenv("enableSeparateBuildPerCPUArchitecture") ? System.getenv("enableSeparateBuildPerCPUArchitecture").toBoolean() : true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true


android {
    ndkVersion rootProject.ext.ndkVersion
    namespace "com.openchsclient"

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv("versionCode") ? 8 * 1048576 + System.getenv("versionCode").toInteger() : 1
        //Our convention of versionCode from now in is to form the number from digits in versionName. E.g. for versionName 2.6.1, the versionCode should be 261. This is to avoid conflicts of versionCodes between different branches.
        // Major.Minor.Patch. We should not change major version every release, just change the minor. Each number allows for two digits
        // https://medium.com/@maxirosson/versioning-android-apps-d6ec171cfd82
        versionName System.getenv("versionName") ? System.getenv("versionName") : "1"

        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            if (enableSeparateBuildPerCPUArchitecture) {
                abiFilters.clear()
            }
        }
        multiDexEnabled true
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            universalApk false
            // If true, also generate a universal APK. This does not affect generation of separate apk per cpu architecture. This is an add on apk that is generated for upload to other markets, such as APKFiles, which do not support multiple APKs for a single app.

        }
    }

    signingConfigs {
        generic {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}generic-release-key.keystore")
            storePassword System.getenv("generic_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("generic_KEY_ALIAS")}"
            keyPassword System.getenv("generic_KEY_PASSWORD")
            enableV1Signing false
        }
        lfe {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}lfe-release-key.keystore")
            storePassword System.getenv("lfe_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("lfe_KEY_ALIAS")}"
            keyPassword System.getenv("lfe_KEY_PASSWORD")
            enableV1Signing false
        }
        lfeTeachNagaland {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}lfeTeachNagaland-release-key.keystore")
            storePassword System.getenv("lfeTeachNagaland_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("lfeTeachNagaland_KEY_ALIAS")}"
            keyPassword System.getenv("lfeTeachNagaland_KEY_PASSWORD")
            enableV1Signing false
        }
        lfeTeachNagalandSecurity {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}lfeTeachNagaland-release-key.keystore")
            storePassword System.getenv("lfeTeachNagaland_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("lfeTeachNagaland_KEY_ALIAS")}"
            keyPassword System.getenv("lfeTeachNagaland_KEY_PASSWORD")
            enableV1Signing false
        }
        sakhi {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}sakhi-release-key.keystore")
            storePassword System.getenv("sakhi_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("sakhi_KEY_ALIAS")}"
            keyPassword System.getenv("sakhi_KEY_PASSWORD")
            enableV1Signing false
        }
        gramin {
            storeFile file("${System.getenv("KEY_STORE_PREFIX") ?: ""}gramin-release-key.keystore")
            storePassword System.getenv("gramin_KEYSTORE_PASSWORD")
            keyAlias "${System.getenv("KEY_STORE_PREFIX") ?: ""}${System.getenv("gramin_KEY_ALIAS")}"
            keyPassword System.getenv("gramin_KEY_PASSWORD")
            enableV1Signing false
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    project.logger.lifecycle("bugsnagAPIKey=" + System.getenv("OPENCHS_CLIENT_BUGSNAG_API_KEY"))
    flavorDimensions "organisation"
    productFlavors {
        generic {
            applicationId "com.openchsclient"
            resValue "string", "app_name", "Avni"
            signingConfig signingConfigs.generic
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("OPENCHS_CLIENT_BUGSNAG_API_KEY") ?: "dummy"]
        }
        lfe {
            applicationId "org.lfeteach.openchsclient"
            resValue "string", "app_name", "Teach AP"
            resValue "string", "sha256_app_google_signature", "76b9cbbc73fdbdb5aaeb26b4bfd260a81e338acd63831bcc3b3948d5b22eb0f3"
            resValue "string", "sha256_app_upload_key_signature", "1316b6323d287df02f3a623ee675cbdac123e351e8163e78a3315da3206f6092"
            signingConfig signingConfigs.lfe
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("LFE_CLIENT_BUGSNAG_API_KEY") ?: "dummy"]
        }
        lfeTeachNagaland {
            applicationId "com.openchsclient.lfeteach.nagaland"
            resValue "string", "app_name", "TEACH Nagaland"
            resValue "string", "sha256_app_google_signature", "80e6b34b2026ce180ca8d6f09a885031082d0acf64eb6bd0492f36121d064ebf"
            resValue "string", "sha256_app_upload_key_signature", "ac19586277b021dcba5097f7e47d7473bab41bf0369fb771a2bff581734561fc"
            signingConfig signingConfigs.lfeTeachNagaland
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("LFE_TEACH_NAGALAND_BUGSNAG_API_KEY") ?: "dummy"]
        }
        lfeTeachNagalandSecurity {
            applicationId "com.openchsclient.lfeteach.nagaland"
            resValue "string", "app_name", "TEACH Nagaland"
            resValue "string", "sha256_app_google_signature", "80e6b34b2026ce180ca8d6f09a885031082d0acf64eb6bd0492f36121d064ebf"
            resValue "string", "sha256_app_upload_key_signature", "ac19586277b021dcba5097f7e47d7473bab41bf0369fb771a2bff581734561fc"
            signingConfig signingConfigs.lfeTeachNagaland
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("LFE_TEACH_NAGALAND_BUGSNAG_API_KEY") ?: "dummy"]
        }
        sakhi {
            applicationId "org.sakhi.openchsclient"
            resValue "string", "app_name", "Sakhi 2.0"
            signingConfig signingConfigs.sakhi
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("OPENCHS_CLIENT_BUGSNAG_API_KEY") ?: "dummy"]
        }
        gramin {
            applicationId "com.openchsclient.gramin"
            resValue "string", "app_name", "Avni Gramin"
            signingConfig signingConfigs.sakhi
            manifestPlaceholders = [bugsnagAPIKey: System.getenv("GRAMIN_BUGSNAG_API_KEY") ?: "dummy"]
        }
    }
    namespace 'com.openchsclient'
    sourceSets {
        // Required to enable TamperChecking, init this only for flavours which need Security Tamper Check enabled
        lfe.java.srcDir 'src/common/java'
        lfeTeachNagaland.java.srcDir 'src/common/java'
        lfeTeachNagalandSecurity.java.srcDir 'src/common/java'
    }
}

dependencies {
    implementation project(':react-native-file-viewer')
    implementation project(':react-native-keep-awake')
    implementation project(':react-native-document-picker')
    implementation project(':react-native-zip-archive')
    implementation project(':react-native-webview')
    implementation project(':react-native-immediate-phone-call')
    implementation (project(':rn-fetch-blob')) {
        exclude group: 'com.squareup.okhttp3'
    }
    implementation project(':react-native-image-picker')
    implementation project(':react-native-fs')
    implementation project(':react-native-geolocation-service')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.appcompat:appcompat:${rootProject.ext.supportLibVersion}"
    implementation project(':react-native-device-info')
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation 'com.facebook.soloader:soloader:0.10.5'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'
    implementation 'org.jetbrains:annotations:16.0.2'

    // required to avoid crash on Android 12 API 31
    implementation 'androidx.work:work-runtime:2.8.1'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation('org.webkit:android-jsc:+')
    }

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
